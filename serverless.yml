service: order-processing
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  stage: dev
  region: 'ap-south-1'
  memorySize: 128
  timeout: 3
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:*"
          Resource: "*"
        - Effect: Allow
          Action:
            - sqs:SendMessage
          Resource: "*"
  environment:
    TABLE_NAME: Orders
    QUEUE_URL: { Ref: OrdersQueue }

custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    target: node20
    external:
      - mock-aws-s3
    loader:
      .html: file
functions:
  healthCheck:
    handler: src/handlers/healthCheck.handler
    description: Health check endpoint
    events:
      - http:
          path: /health
          method: get
  getOrders:
    handler: src/handlers/getOrders.handler
    description: Get all orders
    events:
      - http:
          path: /orders
          method: get
  getOrderById:
    handler: src/handlers/getOrderById.handler
    description: Get order by id
    events:
      - http:
          path: /orders/{id}
          method: get
  updateOrderById:
    handler: src/handlers/updateOrderById.handler
    description: Update order by id
    events:
      - http: 
          path: /orders/{id}
          method: put
  createOrder:
    handler: src/handlers/createOrder.handler
    description: Create order
    events:
      - http:
          path: /orders
          method: post
  deleteOrderById:
    handler: src/handlers/deleteOrderById.handler
    description: Delete order by id
    events:
      - http:
          method: delete
          path: /orders/{id}
  processOrder:
    handler: src/handlers/processOrder.handler
    description: Process order lambda
    events:
      - sqs:
          arn: { "Fn::GetAtt": [ "OrdersQueue", "Arn" ] }
          batchSize: 5
  createUser:
    handler: src/handlers/createUser.handler
    description: Create User lambda
    events:
      - http:
          method: post
          path: /users
  getAllUsers:
    handler: src/handlers/getAllUser.handler
    description: get all users from dataase
    events:
      - http:
          path: /users
          method: get
      
  userLogin:
    handler: src/handlers/login.handler
    description: user login lambda
    events:
      - http:
          path: /auth/login
          method: post
      
plugins:
  - serverless-esbuild

resources:
  Resources:
    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Orders
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput: 
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Products
        AttributeDefinitions:
          - AttributeName: productId
            AttributeType: S
        KeySchema:
          - AttributeName: productId
            KeyType: HASH
        ProvisionedThroughput: 
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1


    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    OrdersQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: OrdersQueue
        VisibilityTimeout: 30
        MessageRetentionPeriod: 86400